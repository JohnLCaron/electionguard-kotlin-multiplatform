package electionguard.core

import java.math.BigInteger
import electionguard.core.Base64.toBase64

// In Java, we have support for base10 BigInteger, so we'll take advantage of that
// to translate our constants into base64. The output of this program goes into
// commonMain/kotlin/electionguard/GroupCommon.kt

fun main() {
    // copied from the ElectionGuard 1.0 spec
    val pStrHex4096 = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93C467E37DB0C7A4D1BE3F810152CB56A1CECC3AF65CC0190C03DF34709AFFBD8E4B59FA03A9F0EED0649CCB621057D11056AE9132135A08E43B4673D74BAFEA58DEB878CC86D733DBE7BF38154B36CF8A96D1567899AAAE0C09D4C8B6B7B86FD2A1EA1DE62FF8643EC7C271827977225E6AC2F0BD61C746961542A3CE3BEA5DB54FE70E63E6D09F8FC28658E80567A47CFDE60EE741E5D85A7BD46931CED8220365594964B839896FCAABCCC9B31959C083F22AD3EE591C32FAB2C7448F2A057DB2DB49EE52E0182741E53865F004CC8E704B7C5C40BF304C4D8C4F13EDF6047C555302D2238D8CE11DF2424F1B66C2C5D238D0744DB679AF2890487031F9C0AEA1C4BB6FE9554EE528FDF1B05E5B256223B2F09215F3719F9C7CCC69DDF172D0D6234217FCC0037F18B93EF5389130B7A661E5C26E54214068BBCAFEA32A67818BD3075AD1F5C7E9CC3D1737FB28171BAF84DBB6612B7881C1A48E439CD03A92BF52225A2B38E6542E9F722BCE15A381B5753EA842763381CCAE83512B30511B32E5E8D80362149AD030AABA5F3A5798BB22AA7EC1B6D0F17903F4E22D840734AA85973F79A93FFB82A75C47C03D43D2F9CA02D03199BACEDDD4533A52566AFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
    val qStrHex4096 = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43"
    val rStrHex4096 = "100000000000000000000000000000000000000000000000000000000000000BC93C467E37DB0C7A4D1BE3F810152CB56A1CECC3AF65CC0190C03DF34709B8AF6A64C0CEDCF2D559DA9D97F095C3076C686037619148D2C86C317102AFA2148031F04440AC0FF0C9A417A89212512E7607B2501DAA4D38A2C1410C4836149E2BDB8C8260E627C4646963EFFE9E16E495D48BD215C6D8EC9D1667657A2A1C8506F2113FFAD19A6B2BC7C45760456719183309F874BC9ACE570FFDA877AA2B23A2D6F291C1554CA2EB12F12CD009B8B8734A64AD51EB893BD891750B85162241D908F0C9709879758E7E8233EAB3BF2D6AB53AFA32AA153AD6682E5A0648897C9BE18A0D50BECE030C3432336AD9163E33F8E7DAF498F14BB2852AFFA814841EB18DD5F0E89516D557776285C16071D211194EE1C3F34642036AB886E3EC28882CE4003DEA335B4D935BAE4B58235B9FB2BAB713C8F705A1C7DE42220209D6BBCACC467318601565272E4A63E38E2499754AE493AC1A8E83469EEF35CA27C271BC792EEE21156E617B922EA8F713C22CF282DC5D6385BB12868EB781278FA0AB2A8958FCCB5FFE2E5C361FC174420122B0163CA4A46308C8C46C91EA7457C136A7D9FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F52A"
    val gStrHex4096 = "1D41E49C477E15EAEEF0C5E4AC08D4A46C268CD3424FC01D13769BDB43673218587BC86C4C1448D006A03699F3ABAE5FEB19E296F5D143CC5E4A3FC89088C9F4523D166EE3AE9D5FB03C0BDD77ADD5C017F6C55E2EC92C226FEF5C6C1DF2E7C36D90E7EAADE098241D3409983BCCD2B5379E9391FBC62F9F8D939D1208B160367C134264122189595EC85C8CDBE5F9D307F46912C04932F8C16815A76B4682BD6BDC0ED52B00D8D30F59C731D5A7FFAE8165D53CF96649AAC2B743DA56F14F19DACC5236F29B1AB9F9BEFC69697293D5DEAD8B5BF5DE9BAB6DE67C45719E56344A3CBDF3609824B1B578E34EAEB6DD3190AB3571D6D671C512282C1DA7BD36B4251D2584FADEA80B9E141423074DD9B5FB83ACBDEAD4C87A58FFF517F977A83080370A3B0CF98A1BC2978C47AAC29611FD6C40E2F9875C35D50443A9AA3F49611DCD3A0D6FF3CB3FACF31471BDB61860B92C594D4E46569BB39FEEADFF1FD64C836A6D6DB85C6BA7241766B7AB56BF739633B054147F7170921412E948D9E47402D15BB1C257318612C121C36B80EB8433C08E7D0B7149E3AB0A8735A92EDCE8FF943E28A2DCEACFCC69EC318909CB047BE1C5858844B5AD44F22EEB289E4CC554F7A5E2F3DEA026877FF92851816071CE028EB868D965CCB2D2295A8C55BD1C070B39B09AE06B37D29343B9D8997DC244C468B980970731736EE018BBADB987"

    helper(
        "4096-bit P and 256-bit Q primes, plus generator G and cofactor R",
        4096,
        BigInteger(pStrHex4096, 16),
        BigInteger(qStrHex4096, 16),
        BigInteger(rStrHex4096, 16),
        BigInteger(gStrHex4096, 16),
        "Production4096")

    val pStrHex3072 = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93C467E37DB0C7A4D1BE3F810152CB56A1CECC3AF65CC0190C03DF34709AFFBD8E4B59FA03A9F0EED0649CCB621057D11056AE9132135A08E43B4673D74BAFEA58DEB878CC86D733DBE7BF38154B36CF8A96D1567899AAAE0C09D4C8B6B7B86FD2A1EA1DE62FF8643EC7C271827977225E6AC2F0BD61C746961542A3CE3BEA5DB54FE70E63E6D09F8FC28658E80567A47CFDE60EE741E5D85A7BD46931CED8220365594964B839896FCAABCCC9B31959C083F22AD3EE591C32FAB2C7448F2A057DB2DB49EE52E0182741E53865F004CC8E704B7C5C40BF304C4D8C4F13EDF6047C555302D2238D8CE11DF2424F1B66C2C5D238D0744DB679AF2890487031F9C0AEA1C4BB6FE9554EE528FDF1B05E5B256223B2F09215F3719F9C7CCC69DED4E530A6EC940C45314D16D3D864B4A8934F8B87C52AFA0961A0A6C5EE4A35377773FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
    val qStrHex3072 = qStrHex4096
    val rStrHex3072 = "100000000000000000000000000000000000000000000000000000000000000BC93C467E37DB0C7A4D1BE3F810152CB56A1CECC3AF65CC0190C03DF34709B8AF6A64C0CEDCF2D559DA9D97F095C3076C686037619148D2C86C317102AFA2148031F04440AC0FF0C9A417A89212512E7607B2501DAA4D38A2C1410C4836149E2BDB8C8260E627C4646963EFFE9E16E495D48BD215C6D8EC9D1667657A2A1C8506F2113FFAD19A6B2BC7C45760456719183309F874BC9ACE570FFDA877AA2B23A2D6F291C1554CA2EB12F12CD009B8B8734A64AD51EB893BD891750B85162241D908F0C9709879758E7E8233EAB3BF2D6AB53AFA32AA153AD6682E5A0648897C9BE18A0D50BECE030C3432336AD9163E33F8E7DAF498F14BB2852AFFA814841EB18DD5F0E89516D557776285C16071D211194EE1C3F34642036AB886E3EC28966409FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F52A"
    val gStrHex3072 = "AF8DC2057963C6C364119C014A27686BA780576748B72F670C4A5D4C3FAC1E228B84FBA88C4EAF94DF98755C6C73611BB54A14A6E232D238C917DA76D8A62B70837A15EEC1110C112561AB0EAE9E11DDCEC61F2BBD54BB762FC903494EF21F0F338FE26582453CE3FF02C53A77296126E59E1980CD49A56726A40CFDEF93A18141CF83442D0FDCDF9F1351B2D0CF814CE9C796402DC2218132D283605BDD15468EABA4B6F78E4DE3DE0766FA9915ED28E00D90757F494986092477C90C5FC305A56829088D996D227D2F018C1A16377B0014A8183F59CF8871C4659132BDDBA79E869AE8F65C93608D179A07D7D994E058E5F51B47C7209A25864DA9F1377C16B1C09C85B66CC3D527FAB3F6B2DF6D6BEA15206298BAC3E293F10E2E9B780ECE033A47CFC451221522BB709E1B94D8EA7487242185D8F8FB013E9E107395D53E22C55502FC1E4A915766F3C3B463A3EE4CB682926A0C4F87CD86181ABC6FB902BD8331DE18F59820C5D967D784B1C06E5A94F31EF8611B545D2F1E184CEAC312"

    helper(
        "3072-bit P and 256-bit Q primes, plus generator G and cofactor R",
        3072,
        BigInteger(pStrHex3072, 16),
        BigInteger(qStrHex3072, 16),
        BigInteger(rStrHex3072, 16),
        BigInteger(gStrHex3072, 16),
        "Production3072")

    helper(
        "32-bit everything, suitable for accelerated testing",
        31,
        BigInteger.valueOf(intTestP.toLong()),
        BigInteger.valueOf(intTestQ.toLong()),
        BigInteger.valueOf(intTestR.toLong()),
        BigInteger.valueOf(intTestG.toLong()),
        "Test")
}

fun helper(header: String, numBits: Int, p: BigInteger, q: BigInteger, r: BigInteger, g: BigInteger, desc: String) {
    println("// $header")
    val p256 = BigInteger.valueOf(1) shl 256

    val pBase64 = p.toByteArray().toBase64()
    val qBase64 = q.toByteArray().toBase64()
    val rBase64 = r.toByteArray().toBase64()
    val gBase64 = g.toByteArray().toBase64()
    val p256minusQBase64 = (p256 - q).toByteArray().toBase64()

    val montgomeryI = BigInteger.ONE shl numBits // 2^{4096} or 2^{3072}
    val montgomeryIMinusOne = montgomeryI - BigInteger.ONE
    val montgomeryIPrime = montgomeryI.modPow(p - BigInteger.TWO, p)

    // The first equation here is seemingly equivalent to what's in the spec, but
    // it yields a different value from the second equation, which makes everything work.

//    val montgomeryPPrime = (montgomeryI - p).modPow(p - BigInteger.TWO, montgomeryI)
    val montgomeryPPrime = (montgomeryI - p).modInverse(montgomeryI)

    if (numBits == 31) {
        println("internal val intTestP = $p")
        println("internal val intTestQ = $q")
        println("internal val intTestR = $r")
        println("internal val intTestG = $g")
        println()

        println("internal val intTestMontgomeryI = ${montgomeryI}U")
        println("internal val intTestMontgomeryIMinus1 = ${montgomeryIMinusOne}U")
        println("internal val intTestMontgomeryIPrime = ${montgomeryIPrime}U")
        println("internal val intTestMontgomeryPPrime = ${montgomeryPPrime}U")
    }

    println("internal val b64${desc}P = \"$pBase64\"")
    println("internal val b64${desc}Q = \"$qBase64\"")
    println("internal val b64${desc}P256MinusQ = \"$p256minusQBase64\"")
    println("internal val b64${desc}R = \"$rBase64\"")
    println("internal val b64${desc}G = \"$gBase64\"")
    println()

    println("internal val b64${desc}MontgomeryI = \"${montgomeryI.toByteArray().toBase64()}\"")
    println("internal val b64${desc}MontgomeryIMinus1 = \"${montgomeryIMinusOne.toByteArray().toBase64()}\"")
    println("internal val b64${desc}MontgomeryIPrime = \"${montgomeryIPrime.toByteArray().toBase64()}\"")
    println("internal val b64${desc}MontgomeryPPrime = \"${montgomeryPPrime.toByteArray().toBase64()}\"")
    println()
    println("internal val int${desc}PBits = $numBits")
    println()
}
