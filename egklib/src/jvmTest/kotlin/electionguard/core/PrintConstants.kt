package electionguard.core

import java.math.BigInteger
import electionguard.core.Base64.toBase64

// In Java, we have support for base10 BigInteger, so we'll take advantage of that
// to translate our constants into base64. The output of this program goes into
// commonMain/kotlin/electionguard/GroupCommon.kt

fun main() {
    // copied from the ElectionGuard 1.9 spec
    val pStrHex4096 =
            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" +
            "B17217F7D1CF79ABC9E3B39803F2F6AF40F343267298B62D8A0D175B8BAAFA2B" +
            "E7B876206DEBAC98559552FB4AFA1B10ED2EAE35C138214427573B291169B825" +
            "3E96CA16224AE8C51ACBDA11317C387EB9EA9BC3B136603B256FA0EC7657F74B" +
            "72CE87B19D6548CAF5DFA6BD38303248655FA1872F20E3A2DA2D97C50F3FD5C6" +
            "07F4CA11FB5BFB90610D30F88FE551A2EE569D6DFC1EFA157D2E23DE1400B396" +
            "17460775DB8990E5C943E732B479CD33CCCC4E659393514C4C1A1E0BD1D6095D" +
            "25669B333564A3376A9C7F8A5E148E82074DB6015CFE7AA30C480A5417350D2C" +
            "955D5179B1E17B9DAE313CDB6C606CB1078F735D1B2DB31B5F50B5185064C18B" +
            "4D162DB3B365853D7598A1951AE273EE5570B6C68F96983496D4E6D330AF889B" +
            "44A02554731CDC8EA17293D1228A4EF98D6F5177FBCF0755268A5C1F9538B982" +
            "61AFFD446B1CA3CF5E9222B88C66D3C5422183EDC99421090BBB16FAF3D949F2" +
            "36E02B20CEE886B905C128D53D0BD2F9621363196AF503020060E49908391A0C" +
            "57339BA2BEBA7D052AC5B61CC4E9207CEF2F0CE2D7373958D762265890445744" +
            "FB5F2DA4B751005892D356890DEFE9CAD9B9D4B713E06162A2D8FDD0DF2FD608" +
            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"

    val qStrHex4096 = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43"

    val rStrHex4096 =
            "100000000000000000000000000000000000000000000000000000000000000BC" +
            "B17217F7D1CF79ABC9E3B39803F2F6AF40F343267298B62D8A0D175B8BAB857A" +
            "E8F428165418806C62B0EA36355A3A73E0C741985BF6A0E3130179BF2F0B43E3" +
            "3AD862923861B8C9F768C4169519600BAD06093F964B27E02D86831231A9160D" +
            "E48F4DA53D8AB5E69E386B694BEC1AE722D47579249D5424767C5C33B9151E07" +
            "C5C11D106AC446D330B47DB59D352E47A53157DE04461900F6FE360DB897DF53" +
            "16D87C94AE71DAD0BE84B647C4BCF818C23A2D4EBB53C702A5C8062D19F5E9B5" +
            "033A94F7FF732F54129712869D97B8C96C412921A9D8679770F499A041C297CF" +
            "F79D4C9149EB6CAF67B9EA3DC563D965F3AAD1377FF22DE9C3E62068DD0ED615" +
            "1C37B4F74634C2BD09DA912FD599F4333A8D2CC005627DCA37BAD43E64A39631" +
            "19C0BFE34810A21EE7CFC421D53398CBC7A95B3BF585E5A04B790E2FE1FE9BC2" +
            "64FDA8109F6454A082F5EFB2F37EA237AA29DF320D6EA860C41A9054CCD24876" +
            "C6253F667BFB0139B5531FF30189961202FD2B0D55A75272C7FD73343F7899BC" +
            "A0B36A4C470A64A009244C84E77CEBC92417D5BB13BF18167D8033EB6C4DD787" +
            "9FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F52A"

    val gStrHex4096 =
            "36036FED214F3B50DC566D3A312FE4131FEE1C2BCE6D02EA39B477AC05F7F885" +
            "F38CFE77A7E45ACF4029114C4D7A9BFE058BF2F995D2479D3DDA618FFD910D3C" +
            "4236AB2CFDD783A5016F7465CF59BBF45D24A22F130F2D04FE93B2D58BB9C1D1" +
            "D27FC9A17D2AF49A779F3FFBDCA22900C14202EE6C99616034BE35CBCDD3E7BB" +
            "7996ADFE534B63CCA41E21FF5DC778EBB1B86C53BFBE99987D7AEA0756237FB4" +
            "0922139F90A62F2AA8D9AD34DFF799E33C857A6468D001ACF3B681DB87DC4242" +
            "755E2AC5A5027DB81984F033C4D178371F273DBB4FCEA1E628C23E52759BC776" +
            "5728035CEA26B44C49A65666889820A45C33DD37EA4A1D00CB62305CD541BE1E" +
            "8A92685A07012B1A20A746C3591A2DB3815000D2AACCFE43DC49E828C1ED7387" +
            "466AFD8E4BF1935593B2A442EEC271C50AD39F733797A1EA11802A2557916534" +
            "662A6B7E9A9E449A24C8CFF809E79A4D806EB681119330E6C57985E39B200B48" +
            "93639FDFDEA49F76AD1ACD997EBA13657541E79EC57437E504EDA9DD01106151" +
            "6C643FB30D6D58AFCCD28B73FEDA29EC12B01A5EB86399A593A9D5F450DE39CB" +
            "92962C5EC6925348DB54D128FD99C14B457F883EC20112A75A6A0581D3D80A3B" +
            "4EF09EC86F9552FFDA1653F133AA2534983A6F31B0EE4697935A6B1EA2F75B85" +
            "E7EBA151BA486094D68722B054633FEC51CA3F29B31E77E317B178B6B9D8AE0F"

    helper(
        "4096-bit P and 256-bit Q primes, plus generator G and cofactor R",
        4096,
        BigInteger(pStrHex4096, 16),
        BigInteger(qStrHex4096, 16),
        BigInteger(rStrHex4096, 16),
        BigInteger(gStrHex4096, 16),
        "Production4096")

    val pStrHex3072 = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93C467E37DB0C7A4D1BE3F810152CB56A1CECC3AF65CC0190C03DF34709AFFBD8E4B59FA03A9F0EED0649CCB621057D11056AE9132135A08E43B4673D74BAFEA58DEB878CC86D733DBE7BF38154B36CF8A96D1567899AAAE0C09D4C8B6B7B86FD2A1EA1DE62FF8643EC7C271827977225E6AC2F0BD61C746961542A3CE3BEA5DB54FE70E63E6D09F8FC28658E80567A47CFDE60EE741E5D85A7BD46931CED8220365594964B839896FCAABCCC9B31959C083F22AD3EE591C32FAB2C7448F2A057DB2DB49EE52E0182741E53865F004CC8E704B7C5C40BF304C4D8C4F13EDF6047C555302D2238D8CE11DF2424F1B66C2C5D238D0744DB679AF2890487031F9C0AEA1C4BB6FE9554EE528FDF1B05E5B256223B2F09215F3719F9C7CCC69DED4E530A6EC940C45314D16D3D864B4A8934F8B87C52AFA0961A0A6C5EE4A35377773FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
    val qStrHex3072 = qStrHex4096
    val rStrHex3072 = "100000000000000000000000000000000000000000000000000000000000000BC93C467E37DB0C7A4D1BE3F810152CB56A1CECC3AF65CC0190C03DF34709B8AF6A64C0CEDCF2D559DA9D97F095C3076C686037619148D2C86C317102AFA2148031F04440AC0FF0C9A417A89212512E7607B2501DAA4D38A2C1410C4836149E2BDB8C8260E627C4646963EFFE9E16E495D48BD215C6D8EC9D1667657A2A1C8506F2113FFAD19A6B2BC7C45760456719183309F874BC9ACE570FFDA877AA2B23A2D6F291C1554CA2EB12F12CD009B8B8734A64AD51EB893BD891750B85162241D908F0C9709879758E7E8233EAB3BF2D6AB53AFA32AA153AD6682E5A0648897C9BE18A0D50BECE030C3432336AD9163E33F8E7DAF498F14BB2852AFFA814841EB18DD5F0E89516D557776285C16071D211194EE1C3F34642036AB886E3EC28966409FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F529FD4A7F52A"
    val gStrHex3072 = "AF8DC2057963C6C364119C014A27686BA780576748B72F670C4A5D4C3FAC1E228B84FBA88C4EAF94DF98755C6C73611BB54A14A6E232D238C917DA76D8A62B70837A15EEC1110C112561AB0EAE9E11DDCEC61F2BBD54BB762FC903494EF21F0F338FE26582453CE3FF02C53A77296126E59E1980CD49A56726A40CFDEF93A18141CF83442D0FDCDF9F1351B2D0CF814CE9C796402DC2218132D283605BDD15468EABA4B6F78E4DE3DE0766FA9915ED28E00D90757F494986092477C90C5FC305A56829088D996D227D2F018C1A16377B0014A8183F59CF8871C4659132BDDBA79E869AE8F65C93608D179A07D7D994E058E5F51B47C7209A25864DA9F1377C16B1C09C85B66CC3D527FAB3F6B2DF6D6BEA15206298BAC3E293F10E2E9B780ECE033A47CFC451221522BB709E1B94D8EA7487242185D8F8FB013E9E107395D53E22C55502FC1E4A915766F3C3B463A3EE4CB682926A0C4F87CD86181ABC6FB902BD8331DE18F59820C5D967D784B1C06E5A94F31EF8611B545D2F1E184CEAC312"

    helper(
        "3072-bit P and 256-bit Q primes, plus generator G and cofactor R",
        3072,
        BigInteger(pStrHex3072, 16),
        BigInteger(qStrHex3072, 16),
        BigInteger(rStrHex3072, 16),
        BigInteger(gStrHex3072, 16),
        "Production3072")

    helper(
        "32-bit everything, suitable for accelerated testing",
        31,
        BigInteger.valueOf(intTestP.toLong()),
        BigInteger.valueOf(intTestQ.toLong()),
        BigInteger.valueOf(intTestR.toLong()),
        BigInteger.valueOf(intTestG.toLong()),
        "Test")
}

fun helper(header: String, numBits: Int, p: BigInteger, q: BigInteger, r: BigInteger, g: BigInteger, desc: String) {
    println("// $header")
    val p256 = BigInteger.valueOf(1) shl 256

    val pBase64 = p.toByteArray().toBase64()
    val qBase64 = q.toByteArray().toBase64()
    val rBase64 = r.toByteArray().toBase64()
    val gBase64 = g.toByteArray().toBase64()
    val p256minusQBase64 = (p256 - q).toByteArray().toBase64()

    val montgomeryI = BigInteger.ONE shl numBits // 2^{4096} or 2^{3072}
    val montgomeryIMinusOne = montgomeryI - BigInteger.ONE
    val montgomeryIPrime = montgomeryI.modPow(p - BigInteger.TWO, p)

    // The first equation here is seemingly equivalent to what's in the spec, but
    // it yields a different value from the second equation, which makes everything work.

//    val montgomeryPPrime = (montgomeryI - p).modPow(p - BigInteger.TWO, montgomeryI)
    val montgomeryPPrime = (montgomeryI - p).modInverse(montgomeryI)

    if (numBits == 31) {
        println("internal val intTestP = $p")
        println("internal val intTestQ = $q")
        println("internal val intTestR = $r")
        println("internal val intTestG = $g")
        println()

        println("internal val intTestMontgomeryI = ${montgomeryI}U")
        println("internal val intTestMontgomeryIMinus1 = ${montgomeryIMinusOne}U")
        println("internal val intTestMontgomeryIPrime = ${montgomeryIPrime}U")
        println("internal val intTestMontgomeryPPrime = ${montgomeryPPrime}U")
    }

    println("internal val b64${desc}P = \"$pBase64\"")
    println("internal val b64${desc}Q = \"$qBase64\"")
    println("internal val b64${desc}P256MinusQ = \"$p256minusQBase64\"")
    println("internal val b64${desc}R = \"$rBase64\"")
    println("internal val b64${desc}G = \"$gBase64\"")
    println()

    println("internal val b64${desc}MontgomeryI = \"${montgomeryI.toByteArray().toBase64()}\"")
    println("internal val b64${desc}MontgomeryIMinus1 = \"${montgomeryIMinusOne.toByteArray().toBase64()}\"")
    println("internal val b64${desc}MontgomeryIPrime = \"${montgomeryIPrime.toByteArray().toBase64()}\"")
    println("internal val b64${desc}MontgomeryPPrime = \"${montgomeryPPrime.toByteArray().toBase64()}\"")
    println()
    println("internal val int${desc}PBits = $numBits")
    println()
}
/*
// 4096-bit P and 256-bit Q primes, plus generator G and cofactor R
NEW
internal val b64Production4096P = "AP//////////////////////////////////////////sXIX99HPeavJ47OYA/L2r0DzQyZymLYtig0XW4uq+ivnuHYgbeusmFWVUvtK+hsQ7S6uNcE4IUQnVzspEWm4JT6WyhYiSujFGsvaETF8OH656pvDsTZgOyVvoOx2V/dLcs6HsZ1lSMr136a9ODAySGVfoYcvIOOi2i2XxQ8/1cYH9MoR+1v7kGENMPiP5VGi7ladbfwe+hV9LiPeFACzlhdGB3XbiZDlyUPnMrR5zTPMzE5lk5NRTEwaHgvR1gldJWabMzVkozdqnH+KXhSOggdNtgFc/nqjDEgKVBc1DSyVXVF5seF7na4xPNtsYGyxB49zXRstsxtfULUYUGTBi00WLbOzZYU9dZihlRric+5VcLbGj5aYNJbU5tMwr4ibRKAlVHMc3I6hcpPRIopO+Y1vUXf7zwdVJopcH5U4uYJhr/1Eaxyjz16SIriMZtPFQiGD7cmUIQkLuxb689lJ8jbgKyDO6Ia5BcEo1T0L0vliE2MZavUDAgBg5JkIORoMVzObor66fQUqxbYcxOkgfO8vDOLXNzlY12ImWJBEV0T7Xy2kt1EAWJLTVokN7+nK2bnUtxPgYWKi2P3Q3y/WCP//////////////////////////////////////////"
internal val b64Production4096Q = "AP////////////////////////////////////////9D"
internal val b64Production4096P256MinusQ = "AL0="
internal val b64Production4096R = "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8sXIX99HPeavJ47OYA/L2r0DzQyZymLYtig0XW4urhXro9CgWVBiAbGKw6jY1Wjpz4MdBmFv2oOMTAXm/LwtD4zrYYpI4YbjJ92jEFpUZYAutBgk/lksn4C2GgxIxqRYN5I9NpT2KteaeOGtpS+wa5yLUdXkknVQkdnxcM7kVHgfFwR0QasRG0zC0fbWdNS5HpTFX3gRGGQD2/jYNuJffUxbYfJSucdrQvoS2R8S8+BjCOi1Ou1PHAqXIBi0Z9em1AzqU9/9zL1QSlxKGnZe4yWxBKSGp2GeXcPSZoEHCl8/3nUyRSetsr2e56j3FY9ll86rRN3/yLenD5iBo3Q7WFRw3tPdGNMK9CdqRL9WZ9DM6jSzABWJ9yje61D5ko5YxGcC/40gQoh7nz8Qh1TOYy8epWzv1heWgS3kOL+H+m8Jk/agQn2RUoIL177LzfqI3qinfMg1uqGDEGpBUzNJIdsYlP2Z7+wE5tVMf8wGJlhIC/SsNVadScsf9czQ/eJm8oLNqTEcKZKAJJEyE53zrySQX1bsTvxgWfYAz62xN14ef1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kg=="
internal val b64Production4096G = "NgNv7SFPO1DcVm06MS/kEx/uHCvObQLqObR3rAX3+IXzjP53p+Raz0ApEUxNepv+BYvy+ZXSR5092mGP/ZENPEI2qyz914OlAW90Zc9Zu/RdJKIvEw8tBP6TstWLucHR0n/JoX0q9Jp3nz/73KIpAMFCAu5smWFgNL41y83T57t5lq3+U0tjzKQeIf9dx3jrsbhsU7++mZh9euoHViN/tAkiE5+Qpi8qqNmtNN/3meM8hXpkaNABrPO2gduH3EJCdV4qxaUCfbgZhPAzxNF4Nx8nPbtPzqHmKMI+UnWbx3ZXKANc6ia0TEmmVmaImCCkXDPdN+pKHQDLYjBc1UG+HoqSaFoHASsaIKdGw1kaLbOBUADSqsz+Q9xJ6CjB7XOHRmr9jkvxk1WTsqRC7sJxxQrTn3M3l6HqEYAqJVeRZTRmKmt+mp5EmiTIz/gJ55pNgG62gRGTMObFeYXjmyALSJNjn9/epJ92rRrNmX66E2V1QeeexXQ35QTtqd0BEGFRbGQ/sw1tWK/M0otz/top7BKwGl64Y5mlk6nV9FDeOcuSlixexpJTSNtU0Sj9mcFLRX+IPsIBEqdaagWB09gKO07wnshvlVL/2hZT8TOqJTSYOm8xsO5Gl5Naax6i91uF5+uhUbpIYJTWhyKwVGM/7FHKPymzHnfjF7F4trnYrg8="

internal val b64Production4096Montgomery
internal val b64Production4096MontgomeryIMinus
internal val b64Production4096MontgomeryIPrime = "AL+bQF0cKBEdRWrPMtwSNVz+0jI2FY99DgiVSo3zl4Fh5gwIa8G31c65S6M+hnUUSyOgj+4ojFKFnyg+o+DN7yfOITXi1IJH7kxIl7itrOAloBmmMCCJbND//JJAJgT9D+EUa7NJ7552az3v+ssEjCM9JD04OJoQDwKRmxJDIdnFh9pWZhEYhohsrLIc+qRSbp8JBuIGFQcEBA5DP8N7dlh1kddTS13Nr4ksY9iylbBD6kyLPUXLQbCIGl2z4312w0KUJBHDTOmNg1fSQwTQl45O/RISEYnoM03hry+nfp2WHg/BmpvaUII7ITAchCzo1fup6RSdz2qCG2by1nRD2rAw/lpGZfoULzro+dBjEUeoZCI8rN6d0sjyech5U/gVisNcqEa4XA+ea8Q804RPon8dbJH+yERsnzy1f8Oyh36MS6dGgnjC5sMNgBMdBUfrK0jF1kNBExs6GcqTJu6zspGGbn8GDI32ic661ZndgODQlMdyq715LmHSNSmFw4wStqbhDdgN3yXb9xJvFDYRVCS1h1q4Tnhlj1EOqhHrM9NwrIsFRFTvcVPsP5V1/FxrxagYJ1acA0DQvf+xoszpPGFySTz9iXcbpMlBylr5gu4ebBSkqjYHGzrTkJGsCkqnq+JNhinTUXK8KdO0iXToyGm9jJL+LiXZ7zWtOAveShTs"
internal val b64Production4096MontgomeryPPrime = "AL+bQF0cKBEdRWrPMtwSNVz+0jI2FY99DgiVSo3zl4FiINeMNWVVKLtZ+r2mYwwz1gFDXhxzmJ6mmTUTlQ0ASUne6nH8iHPBTTxojajkcPY+99BcRU4Lqdlhdu+yI9Sq/5jEYfxz8iyx9xTeXxrBF+7JNtUN+rB0n5HBWwmwsQlDKy8kfGYkDOtSAmecyBy3PLhuUii/+Y35DDL/okjZz2xKJBu82tLFf41plk2EBW5DxGfjOwsY9J8EeZiGfFu0ozbaZMW5hlRIWCluf+d71Pf+6AAcDc9fnk7cyIydQwpgNXRkuJ2/bX5ithWlrbhFpohSCqc2dLPJciwugV0Z5FYLJAJYmWxoGl7QDbp6So0wpvaUbXgiN8q0OHlMytPx4H/Zwtl8IU5F/1/zlYWU6xkvVasvJ/J7qOp9YcsEWeXGjqGTfWPGN/s+bhWPuj6YcuQIn7sCRoaZZKoHp8J4vUQV2nNtvyRVYqO8nnX7FR2GH9CaJ+2RX0niLe+HeTeVP9tf/ohoZesFJtDhwZZMkeDnEG77L8oYYXTG9CdocQzjQE0AsmYcTf1sBBp4/YTdyI/NmXOEYZlpZ/AezIiFY5X7Xy2kt1EAWJLTVokN7+nK2bnUtxPgYWKi2P3Q3y/WCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB"

OLD
internal const val b64Production4096P = "AP//////////////////////////////////////////k8Rn432wx6TRvj+BAVLLVqHOzDr2XMAZDAPfNHCa/72OS1n6A6nw7tBknMtiEFfREFaukTITWgjkO0Zz10uv6ljeuHjMhtcz2+e/OBVLNs+KltFWeJmqrgwJ1Mi2t7hv0qHqHeYv+GQ+x8Jxgnl3Il5qwvC9YcdGlhVCo8476l21T+cOY+bQn4/ChljoBWekfP3mDudB5dhae9RpMc7YIgNlWUlkuDmJb8qrzMmzGVnAg/Iq0+5ZHDL6ssdEjyoFfbLbSe5S4BgnQeU4ZfAEzI5wS3xcQL8wTE2MTxPt9gR8VVMC0iONjOEd8kJPG2bCxdI40HRNtnmvKJBIcDH5wK6hxLtv6VVO5Sj98bBeWyViI7LwkhXzcZ+cfMxp3fFy0NYjQhf8wAN/GLk+9TiRMLemYeXCblQhQGi7yv6jKmeBi9MHWtH1x+nMPRc3+ygXG6+E27ZhK3iBwaSOQ5zQOpK/UiJaKzjmVC6fcivOFaOBtXU+qEJ2M4HMroNRKzBRGzLl6NgDYhSa0DCqul86V5i7Iqp+wbbQ8XkD9OIthAc0qoWXP3mpP/uCp1xHwD1D0vnKAtAxmbrO3dRTOlJWav//////////////////////////////////////////"
internal const val b64Production4096Q = "AP////////////////////////////////////////9D"
internal const val b64Production4096P256MinusQ = "AL0="
internal const val b64Production4096R = "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8k8Rn432wx6TRvj+BAVLLVqHOzDr2XMAZDAPfNHCbivamTAztzy1VnanZfwlcMHbGhgN2GRSNLIbDFxAq+iFIAx8ERArA/wyaQXqJISUS52B7JQHapNOKLBQQxINhSeK9uMgmDmJ8RkaWPv/p4W5JXUi9IVxtjsnRZnZXoqHIUG8hE/+tGaayvHxFdgRWcZGDMJ+HS8ms5XD/2od6orI6LW8pHBVUyi6xLxLNAJuLhzSmStUeuJO9iRdQuFFiJB2QjwyXCYeXWOfoIz6rO/LWq1OvoyqhU61mguWgZIiXyb4YoNUL7OAww0MjNq2RY+M/jn2vSY8UuyhSr/qBSEHrGN1fDolRbVV3dihcFgcdIRGU7hw/NGQgNquIbj7CiILOQAPeozW02TW65LWCNbn7K6txPI9wWhx95CIgIJ1rvKzEZzGGAVZScuSmPjjiSZdUrkk6wajoNGnu81yifCcbx5Lu4hFW5he5IuqPcTwizygtxdY4W7EoaOt4Enj6CrKolY/Mtf/i5cNh/BdEIBIrAWPKSkYwjIxGyR6nRXwTan2f1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kf1Kg=="
internal const val b64Production4096G = "HUHknEd+Feru8MXkrAjUpGwmjNNCT8AdE3ab20NnMhhYe8hsTBRI0AagNpnzq65f6xnilvXRQ8xeSj/IkIjJ9FI9Fm7jrp1fsDwL3Xet1cAX9sVeLsksIm/vXGwd8ufDbZDn6q3gmCQdNAmYO8zStTeek5H7xi+fjZOdEgixYDZ8E0JkEiGJWV7IXIzb5fnTB/RpEsBJMvjBaBWna0aCvWvcDtUrANjTD1nHMdWn/66BZdU8+WZJqsK3Q9pW8U8Z2sxSNvKbGrn5vvxpaXKT1d6ti1v13purbeZ8RXGeVjRKPL3zYJgksbV4406utt0xkKs1cdbWccUSKCwdp702tCUdJYT63qgLnhQUIwdN2bX7g6y96tTIelj/9Rf5d6gwgDcKOwz5ihvCl4xHqsKWEf1sQOL5h1w11QRDqao/SWEdzToNb/PLP6zzFHG9thhguSxZTU5GVpuzn+6t/x/WTINqbW24XGunJBdmt6tWv3OWM7BUFH9xcJIUEulI2eR0AtFbscJXMYYSwSHDa4DrhDPAjn0LcUnjqwqHNaku3Oj/lD4ootzqz8xp7DGJCcsEe+HFhYhEta1E8i7rKJ5MxVT3peLz3qAmh3/5KFGBYHHOAo64aNllzLLSKVqMVb0cBws5sJrgazfSk0O52Jl9wkTEaLmAlwcxc27gGLutuYc="

internal const val b64Production4096Montgomery
internal const val b64Production4096MontgomeryIMinus1 = "AP//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"
internal const val b64Production4096MontgomeryIPrime = "AKSZ6H5W9bINAiMN6a6HSwbigTX27Dgzuqd+4d9EsijOuqNdgY2lyMhN/xIg12AQAph7X8SMckK/ytJ5bgkWWPu6QwI46RQNkBuTHoBCVlKGrWJSbK5TYShEQVEe97kZ30z9prNOhvwZNnTYsqgxvghS+fQkMwlmNy5hEZiuyaArpCm4cI+BgPrUPe2uGmxgUOTL3Ipri4bMkDzKPjbVkh0yFyBAjA/Vpb8gci9CW6TR+J2UdwGTmZrNbMt1SHhG32VlNftF53FffZpdd+gO+y4BgMvRtZK/RbfdwJ8mZygESHdRaCbLDlDZEFens4rmRRQ4uIt7i2rEIUIIGWxCmD4h/9AD9/dwKMq0R+Q0Ti9WfDX5kGaNQsYXstsxkcdT/rUnO5+9ftxyXf2rUy5ThjvG102CBzLocpOk3ce1bPwSTEOq4lIPYAW2fbzT1Xakv+U5Xwd5pGx+Zp/7uYlNn7YCC/9C/RFJYOFlfxgC2H17O4GSmOSzXOOK7Bp7/zrW7+o/k4DbLV5jXltaOPC8jV+RMM8mx4TWKctx0ywHYdd84WUF3eoTwGVb3XE06n1KjLdKDrXtwpspFErX8opDN0hkCwyLGb1Ibvl9hyHpP0gbbE7tP1oG/u2Wx6xzRluTPELm4XslAAUyacnBq6JNvLtHZWPtJXANoAnQtZTkDvjB"
internal const val b64Production4096MontgomeryPPrime = "AKSZ6H5W9bINAiMN6a6HSwbigTX27Dgzuqd+4d9EsijPADqc3SYdA8Rq8V2PtOq3U9hrEu6VjhKHgUtxYhBO97qIC3vdbWuC9NtgEKja7eU0Y8KT2E2/XZ+0Gf5gJHZ4//aVRkPkAnxe6iTMN2zjdKYtFW0QZ0PtAj33HOLcQx+sORfOnFLSdVhg8fws+8eOgZwd/ZRkEkSpyhdgVPJgfmy1M9NkZarlZ6QvdKgnsOoDHUnSoMs1OpowwAWP+eue3WwwnwXfKjqhi9TEa/Ld02+cq6iC4PHI2aGjfuzujZM6VBj2XjDZlUk3RHYvFGW2Gq2fqHkJo9smjdasVy3/G6fT+Cz5owxggcncVWPrc3VNnGd4H9hY777NQ8Y5MDdOtlMl0dAO+p61t9ikR/Mv3mYIqx/gdfKfVoKTk+VvU/BcCRb2MrMzggmPeSCPeIH8QAYWIIyciQKiFcg1hmtTjSa+v86FsYutke6dTpQeSnL5/5+yAEfUnLSaby2AU/6yxkXdFw/I49cmUpDTq6R+rCrF/uutEeOSH7VOQqfjLkq9nVMHzZvEu+npZBEMI0UlLQp7Pt7YUlkxmAWu+tfllMA0qoWXP3mpP/uCp1xHwD1D0vnKAtAxmbrO3dRTOlJWawAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB"
 */
